import React, { useState } from 'react'
import { GetStaticProps } from 'next'
import fs from 'fs'
import path from 'path'
import matter from 'gray-matter'
import Link from 'next/link'
import { motion } from 'framer-motion'
import { Search, Tag, Calendar, Clock, ArrowRight } from 'lucide-react'
import Head from 'next/head'

interface BlogPost {
  slug: string
  title: string
  excerpt: string
  date: string
  readTime: string
  tags: string[]
  content: string
}

interface BlogPageProps {
  posts: BlogPost[]
}

const BlogPage: React.FC<BlogPageProps> = ({ posts }) => {
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedTag, setSelectedTag] = useState<string | null>(null)

  // 获取所有标签
  const allTags = Array.from(new Set(posts.flatMap(post => post.tags)))

  // 过滤文章
  const filteredPosts = posts.filter(post => {
    const matchesSearch = post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         post.excerpt.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesTag = selectedTag === null || post.tags.includes(selectedTag)
    return matchesSearch && matchesTag
  })

  const cardVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: { y: 0, opacity: 1 }
  }

  return (
    <>
      <Head>
        <title>博客 | Nan&apos;s Blog</title>
        <meta name="description" content="记录技术学习过程中的思考与实践" />
      </Head>
      
      <div className="container mx-auto px-4 py-8">
        {/* 页面标题 */}
        <motion.div
          initial={{ y: -50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.6 }}
          className="text-center mb-12"
        >
          <h1 className="text-4xl md:text-6xl font-bold text-gray-900 dark:text-white mb-4">
            我的博客
          </h1>
          <p className="text-xl text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
            记录技术学习过程中的思考与实践
          </p>
        </motion.div>

        {/* 搜索和过滤 */}
        <motion.div
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.6, delay: 0.2 }}
          className="mb-12 space-y-6"
        >
          {/* 搜索框 */}
          <div className="relative max-w-md mx-auto">
            <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type="text"
              placeholder="搜索文章..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-12 pr-4 py-3 rounded-xl border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 shadow-lg"
            />
          </div>

          {/* 标签过滤 */}
          <div className="flex flex-wrap gap-2 justify-center">
            <button
              onClick={() => setSelectedTag(null)}
              className={`px-4 py-2 rounded-full text-sm font-medium transition-all duration-200 ${
                selectedTag === null
                  ? 'bg-blue-500 text-white shadow-lg'
                  : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
              }`}
            >
              全部
            </button>
            {allTags.map(tag => (
              <button
                key={tag}
                onClick={() => setSelectedTag(tag)}
                className={`px-4 py-2 rounded-full text-sm font-medium transition-all duration-200 ${
                  selectedTag === tag
                    ? 'bg-blue-500 text-white shadow-lg'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                }`}
              >
                <Tag className="inline w-3 h-3 mr-1" />
                {tag}
              </button>
            ))}
          </div>
        </motion.div>

        {/* 文章统计 */}
        <motion.div
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.6, delay: 0.3 }}
          className="text-center mb-8"
        >
          <p className="text-gray-600 dark:text-gray-400">
            找到 <span className="font-semibold text-blue-600 dark:text-blue-400">{filteredPosts.length}</span> 篇文章
          </p>
        </motion.div>

        {/* 文章网格 */}
        <motion.div
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.6, delay: 0.4 }}
          className="grid gap-8 md:grid-cols-2 lg:grid-cols-3"
        >
          {filteredPosts.map((post, index) => (
            <motion.article
              key={post.slug}
              variants={cardVariants}
              initial="hidden"
              animate="visible"
              transition={{ duration: 0.5, delay: index * 0.1 }}
              className="group"
            >
              <Link href={`/blog/${post.slug}`}>
                <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 p-6 h-full border border-gray-100 dark:border-gray-700 group-hover:border-blue-300 dark:group-hover:border-blue-600 group-hover:-translate-y-2">
                  <div className="flex flex-col h-full">
                    {/* 标题 */}
                    <h2 className="text-xl font-bold text-gray-900 dark:text-white mb-3 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-200">
                      {post.title}
                    </h2>

                    {/* 摘要 */}
                    <p className="text-gray-600 dark:text-gray-300 mb-4 flex-grow line-clamp-3">
                      {post.excerpt}
                    </p>

                    {/* 标签 */}
                    <div className="flex flex-wrap gap-2 mb-4">
                      {post.tags.slice(0, 3).map(tag => (
                        <span
                          key={tag}
                          className="px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 rounded-lg text-xs font-medium"
                        >
                          {tag}
                        </span>
                      ))}
                      {post.tags.length > 3 && (
                        <span className="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 rounded-lg text-xs">
                          +{post.tags.length - 3}
                        </span>
                      )}
                    </div>

                    {/* 元信息 */}
                    <div className="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400 pt-4 border-t border-gray-100 dark:border-gray-700">
                      <div className="flex items-center space-x-4">
                        <div className="flex items-center">
                          <Calendar className="w-4 h-4 mr-1" />
                          {post.date}
                        </div>
                        <div className="flex items-center">
                          <Clock className="w-4 h-4 mr-1" />
                          {post.readTime}
                        </div>
                      </div>
                      <ArrowRight className="w-4 h-4 group-hover:translate-x-1 transition-transform duration-200" />
                    </div>
                  </div>
                </div>
              </Link>
            </motion.article>
          ))}
        </motion.div>

        {/* 无结果状态 */}
        {filteredPosts.length === 0 && (
          <motion.div
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            className="text-center py-16"
          >
            <div className="text-6xl mb-4">📝</div>
            <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
              暂无匹配文章
            </h3>
            <p className="text-gray-600 dark:text-gray-400">
              尝试调整搜索条件或清除标签过滤
            </p>
          </motion.div>
        )}
      </div>
    </>
  )
}

export const getStaticProps: GetStaticProps = async () => {
  const docsDirectory = path.join(process.cwd(), 'docs')
  
  let posts: BlogPost[] = []
  
  try {
    const filenames = fs.readdirSync(docsDirectory)
    const markdownFiles = filenames.filter(name => name.endsWith('.md'))

    posts = markdownFiles.map(filename => {
      const filePath = path.join(docsDirectory, filename)
      const fileContents = fs.readFileSync(filePath, 'utf8')
      const { data, content } = matter(fileContents)

      // 从文件名生成slug
      const slug = filename.replace(/\.md$/, '')

      // 生成摘要（取内容前150个字符）
      const excerpt = content
        .replace(/^#.*$/gm, '') // 移除标题
        .replace(/```[\s\S]*?```/g, '') // 移除代码块
        .replace(/[#*`[\]]/g, '') // 移除markdown符号
        .trim()
        .substring(0, 150) + '...'

      // 计算阅读时间（假设每分钟200字）
      const readTime = `${Math.max(1, Math.ceil(content.length / 200 / 5))} 分钟阅读`

      // 从内容或文件名提取标签
      const tags = data.tags || [
        filename.includes('cloud') ? '云计算' : '',
        filename.includes('optimization') ? '性能优化' : '',
        filename.includes('fix') ? '问题修复' : '',
        '技术'
      ].filter(Boolean)

      return {
        slug,
        title: data.title || content.match(/^# (.+)$/m)?.[1] || slug,
        excerpt,
        date: data.date || new Date().toLocaleDateString('zh-CN'),
        readTime,
        tags,
        content
      }
    })

    // 按日期排序
    posts.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
  } catch (error) {
    console.log('无法读取docs目录，返回空列表')
  }

  return {
    props: {
      posts
    }
  }
}

export default BlogPage 